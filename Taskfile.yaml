# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile performs the build operations for a module, it handles
#git code updates, msbuild on solutions, and sleet NuGet feed pushes.

#this file must be in the same directory as the solution file

#NOTES: Since CI project is pulled from the module root, MODULE_DIR is used instead of PROJECT_DIR

version: '3'

vars:

  #cross platform commands to make and remove directories
  _RMDIR: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{ else }}rm -rf{{ end }}'
  _MKDIR: '{{ if eq OS "windows" }}powershell mkdir -Force{{ else }}mkdir -p{{ end }}'
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'

  CMAKE_BUILD_DIR: 'build/{{ OS }}'
  TEST_EXE_NAME: 'nctest'
  CI_BUILD_CONFIG: '{{ .CI_BUILD_CONFIG | default "Release" }}'

  MBEDTLS_SRC_DIR: '{{ .USER_WORKING_DIR }}/vendor/mbedtls'
  SECP256_SRC_DIR: '{{ .USER_WORKING_DIR }}/vendor/secp256k1'
  OPENSSL_SRC_DIR: '{{ .USER_WORKING_DIR }}/vendor/openssl'
  MONOCYPHER_SRC_DIR: '{{ .USER_WORKING_DIR }}/vendor/monocypher'

tasks:

  default:
    desc: "Build the library for your system"
    summary: 
      Builds Noscrypt for your system using safe defaults. The default configuration is
      set to 'Release' and the test executable is not built. 
      You may specify addtional arugments like this 'task -- -DNC_ENABLE_UTILS=ON'
    cmds:
     - task: cmake-build
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         CMAKE_CONFIG_ARGS: '{{ .CMAKE_CONFIG_ARGS }} {{ .CLI_ARGS }}'
         CMAKE_TEST_STATUS: '{{ .CMAKE_TEST_STATUS | default "OFF" }}'
         BUILD_CONFIG: '{{ .BUILD_CONFIG | default "Release" }}'

  build-mbedtls:
    desc: "Build the library linking against mbedls as a crypto backend"
    summary: |
      Configures, and compiles mbedtls, then builds noscrypt linking against mbedtls 
      as a crypto backend. 
    cmds:
     - task: mbedtls-build
       vars: { CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}' }

     - task: default
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         BUILD_CONFIG: '{{ .BUILD_CONFIG | default "Release" }}'
         CMAKE_TEST_STATUS: '{{ .CMAKE_TEST_STATUS | default "OFF" }}'
         CMAKE_CONFIG_ARGS: '
          {{ .CMAKE_CONFIG_ARGS }}
          -DCRYPTO_LIB=mbedtls
          -DCRYPTO_LIB_DIR={{ .CMAKE_BUILD_DIR }}/_deps/mbedtls'

  build-debug:
    desc: "Build libraries and test executable in debug mode"
    summary: |
      Runs the CMake configure and compile steps to build the library 
      and test executable in debug mode.
    cmds:
     - task: default
       vars: { CMAKE_TEST_STATUS: 'ON', BUILD_CONFIG: 'Debug' }

  #available to users and vnbuild runner
  test:
    desc: "Builds a local copy of the library in a debug configuration, then runs the test executable"
    cmds:
     - task: build-debug
 
     - task: cmake-test
       vars: { CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}' }

  install:
    desc: "Uses cmake to install the library on your system"
    cmds:
     - cmd: echo "Installing noscrypt globally"
       silent: true
     - task: cmake-install
   
  #Test executable and library must be built for tests to run
  memcheck:
    desc: 'Runs Valgrind memcheck in debug mode against the nctest executable (Linux only)'
    summary: |
      Runs Valgrind memcheck in debug mode against the nctest executable. 
      This task is only available on Linux platforms with Valgrind and the 
      Memcheck tool is installed. You must build the test executable in debug
      mode before running this task.
    platforms:
      - linux 
    preconditions:
      - which valgrind
    cmds:
     - cmd: echo "Running valgrind memory check on test executable"
       silent: true
     - cmd: 
         valgrind 
         --tool=memcheck
         --leak-check=full 
         --show-leak-kinds=all 
         --track-origins=yes 
         {{ .CMAKE_BUILD_DIR }}/{{ .TEST_EXE_NAME }}

  clean:
    desc: "Cleans the build and artifact directories"
    ignore_error: true
    cmds:
    - for: [ bin/, build/ ]
      cmd: '{{ ._RMDIR }} "{{ .ITEM }}"'

#################################
#
#       INTERNAL TASKS
#
#################################

  cmake-configue: 
    internal: true
    requires: { CMAKE_BUILD_DIR, BUILD_CONFIG, CMAKE_TEST_STATUS }
    cmds:
     - cmd: cmake
        -S . 
        -B{{ .CMAKE_BUILD_DIR }} 
        -DCMAKE_BUILD_TYPE={{ .BUILD_CONFIG }} 
        -DNC_BUILD_TESTS={{ .CMAKE_TEST_STATUS }}
        {{ .CMAKE_CONFIG_ARGS }}
        

  #perfoms CMake compile step
  cmake-compile:    
    internal: true
    requires: { CMAKE_BUILD_DIR, BUILD_CONFIG }
    cmds:
     - cmd: cmake 
        --build {{ .CMAKE_BUILD_DIR }} 
        --config {{ .BUILD_CONFIG }}
  
  #runs the configure and compile cmake steps
  cmake-build:
    internal: true
    requires: { CMAKE_BUILD_DIR, BUILD_CONFIG, CMAKE_TEST_STATUS }
    cmds:
     - task: cmake-configue
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         BUILD_CONFIG: '{{ .BUILD_CONFIG }}'
         CMAKE_TEST_STATUS: '{{ .CMAKE_TEST_STATUS }}'
         CMAKE_CONFIG_ARGS: '{{ .CMAKE_CONFIG_ARGS }}'
     
     - task: cmake-compile
       vars: 
         CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}'
         BUILD_CONFIG: '{{ .BUILD_CONFIG }}'

  #runs the cmake install step
  cmake-install:
    internal: true
    requires: { CMAKE_BUILD_DIR }
    cmds:
     - cmd: cmake --install {{ .CMAKE_BUILD_DIR }} {{ .CLI_ARGS }}
  
  cmake-test:
    internal: true
    requires: { CMAKE_BUILD_DIR }
    cmds:
     - cmd: cd {{ .CMAKE_BUILD_DIR }} && ctest -C Debug --verbose --output-on-failure
  
  mbedtls-configure:
    internal: true
    requires: { CMAKE_BUILD_DIR, MBEDTLS_SRC_DIR }
    vars:
      MBEDTLS_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}/_deps/mbedtls'
      MBEDTLS_CONFIG_FILE: '{{ .USER_WORKING_DIR }}/vendor/mbedtls/mbedtls_noscrypt_config.h'
    cmds:
     #clear build dir before re-configuring
     - cmd: '{{ .RMDIR }} "{{ .MBEDTLS_BUILD_DIR }}"'
       ignore_error: true

     - cmd: cmake 
        -S '{{ .MBEDTLS_SRC_DIR }}' 
        -B '{{ .MBEDTLS_BUILD_DIR }}' 
        -DCMAKE_BUILD_TYPE=Release 
        -DENABLE_PROGRAMS=OFF 
        -DENABLE_TESTING=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DUSE_SHARED_MBEDTLS_LIBRARY=OFF
        -DUSE_STATIC_MBEDTLS_LIBRARY=ON
        -DDISABLE_PACKAGE_CONFIG_AND_INSTALL=ON
        -DMBEDTLS_CONFIG_FILE='{{ .MBEDTLS_CONFIG_FILE }}'

  mbedtls-compile:
    internal: true
    requires: { CMAKE_BUILD_DIR }
    vars:
      MBEDTLS_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}/_deps/mbedtls'
    cmds:
     - cmd: cmake --build '{{ .MBEDTLS_BUILD_DIR }}' --config Release
    
  mbedtls-build:
    internal: true
    desc: "Configures, and compiles mbedtls locally"
    requires: { CMAKE_BUILD_DIR }
    cmds:
     - task: mbedtls-configure
       vars: { CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}' }
     - task: mbedtls-compile
       vars: { CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}' }

#################################
#       
#       CI TASKS
#
#################################

  # called by Module.taskfile to run tests
  ci-test:
    vars:
      MBEDTLS_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}/test/mbedtls'
      DEFAULT_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}/test/default'
      BUILD_ARGS: '-DNC_ENABLE_UTILS=ON'
    deps:
      - task: cmake-build
        vars: 
           BUILD_CONFIG: 'Debug'
           CMAKE_TEST_STATUS: 'ON'
           CMAKE_BUILD_DIR: '{{ .DEFAULT_BUILD_DIR }}'
           CMAKE_CONFIG_ARGS: '{{ .BUILD_ARGS }}'

      - task: build-mbedtls
        vars: 
          BUILD_CONFIG: 'Debug'
          CMAKE_TEST_STATUS: 'ON'
          CMAKE_BUILD_DIR: '{{ .MBEDTLS_BUILD_DIR }}'
          CMAKE_CONFIG_ARGS: '{{ .BUILD_ARGS }}'
    cmds:
     #cleanup build directories after testing
     - defer: '{{ ._RMDIR }} "{{ .CMAKE_BUILD_DIR }}/test"'

     #run tests and memcheck against default build
     - task: cmake-test
       vars: { CMAKE_BUILD_DIR: '{{ .DEFAULT_BUILD_DIR }}' }
     - task: memcheck
       vars: { CMAKE_BUILD_DIR: '{{ .DEFAULT_BUILD_DIR }}' }

     #run tests and memcheck against mbedtls build
     - task: cmake-test
       vars: { CMAKE_BUILD_DIR: '{{ .MBEDTLS_BUILD_DIR }}' }
     - task: memcheck
       vars: { CMAKE_BUILD_DIR: '{{ .MBEDTLS_BUILD_DIR }}' }


  ci-pack-source:
    internal: true
    desc: "Packs up the project source code and creates a tarball in the builds binary directory"
    vars:
      TARGET_SOURCE: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}/{{ .PROJECT_NAME }}-src.tgz'
      SOURCE_FILES: 
        CMakeLists.txt
        Taskfile.yaml
        src
        include
        license
        tests
        vendor
        readme.md
        CMakePresets.json

    cmds:
      #tar up the source
     - cmd: tar -czf "{{ .TARGET_SOURCE }}" {{ .SOURCE_FILES | join " " }}  

  ci-build-win_x64:
    internal: true
    requires: { CMAKE_BUILD_DIR, BINARY_DIR, PROJECT_DIR, CI_BUILD_CONFIG, PROJECT_NAME }
    platforms: [ windows ]
    vars:
      TARGET: '{{ .PROJECT_DIR }}/{{ .BINARY_DIR }}/msvc-x64-{{ .CI_BUILD_CONFIG }}-{{ .PROJECT_NAME }}.tgz'
      BUILD_DIR: 'build/win-x64'

      TAR_FILES: "
        {{ .PROJECT_NAME }}.dll 
        {{ .PROJECT_NAME }}.lib
        {{ .PROJECT_NAME }}_static.lib
        license.txt"
    
    cmds:
    #remove deps dir to avoid conflicts with vnbuild
     - defer: '{{ ._RMDIR }} "{{ .BUILD_DIR }}/_deps"'

     #run configure and compile commands 
     - task: cmake-build
       vars: 
         CMAKE_BUILD_DIR: '{{ .BUILD_DIR }}'
         BUILD_CONFIG: '{{ .CI_BUILD_CONFIG }}'
         CMAKE_TEST_STATUS: 'OFF'
         CMAKE_CONFIG_ARGS: '-G "Visual Studio 17 2022" -A x64 -DNC_ENABLE_UTILS=ON'

    #copy license to build dir
     - cmd: powershell cp license '{{ .BUILD_DIR }}/{{ .CI_BUILD_CONFIG }}/license.txt'

    #tar up the binaries
     - cmd: cd {{ .BUILD_DIR }}/{{ .CI_BUILD_CONFIG }} &&  tar -czf "{{ .TARGET }}" {{ .TAR_FILES }}

 #called by build pipeline to build module
  build:
    cmds:
     - cmd: echo "building project {{ .PROJECT_NAME }}" 
     - cmd: '{{ ._MKDIR }} {{ .BINARY_DIR }}'
  
     #build windows x64
     - task: ci-build-win_x64

     #pack source
     - task: ci-pack-source

#################################
#
#       DEV TASKS
#
#################################

  dev-test:
    desc: "Re-runs compilation phase and test executable"
    cmds:
     - task: cmake-compile
       vars: { BUILD_CONFIG: 'Debug' }

     - task: cmake-test
       vars: { CMAKE_BUILD_DIR: '{{ .CMAKE_BUILD_DIR }}' }

     - task: memcheck

  dev:
    desc: "Runs local development tests and watches for changes"
    summary: |
      Watches for changes to source and config files, recompiles, and runs tests
      automatically when changes are detected. 
    watch: true
    sources:
      - include/*
      - src/*
      - src/*/* 
      - tests/*
      - CMakelists.txt
      - vendor/* 
    cmds:
     - task: dev-test

  dev-gdb-test:
    platforms: [ linux ]
    desc: "Starts a new gdb session on the test executable"
    summary: |
      (Linux only) Starts a new gdb session on the test executable.
      Use the 'run' command to start the test executable. 
    interactive: true
    cmds:
     - task: cmake-compile
       vars: { BUILD_CONFIG: 'Debug' }

     - cmd: gdb '{{ .CMAKE_BUILD_DIR }}/{{ .TEST_EXE_NAME }}'
  
  dev-update-deps:
     desc: "Updates vendored projects files (headers mostly) from their source repositories to the configured version"
     cmds:
      - defer: '{{ ._RMDIR }} .update/'
  
      #must run serially since git does not support mutliple instances
      - task: dev-update-monocypher
      - task: dev-update-mbedtls
      - task: dev-update-openssl-headers
      - task: dev-update-secp256

  dev-update-monocypher:
    vars:
      MC_DOWNLOAD_URL: 'https://monocypher.org/download/monocypher-4.0.2.tar.gz'
      TMP_DIR: '.update/mc'
    cmds:
     - cmd: '{{ ._MKDIR }} "{{ .TMP_DIR }}"'
       ignore_error: true
     
     - cmd: curl {{ .MC_DOWNLOAD_URL }} -L | tar -xzf - -C '{{ .TMP_DIR }}' --strip-components=1

     #copy only the required source code files
     - for: [ 'src/monocypher.h', 'src/monocypher.c' ]
       cmd: '{{ if eq OS "windows" }}powershell{{ end }} cp "{{ .TMP_DIR }}/{{ .ITEM }}" "{{ .MONOCYPHER_SRC_DIR }}"'

  dev-update-mbedtls:
    requires: { MBEDTLS_SRC_DIR }
    vars:
      TAR_URL: 'https://github.com/Mbed-TLS/mbedtls/releases/download/mbedtls-{{ .MBEDTLS_VERSION }}/mbedtls-{{ .MBEDTLS_VERSION }}.tar.bz2'
    cmds:
     - cmd: '{{ if eq OS "windows" }}wsl{{ end }} 
        curl {{ .TAR_URL }} --location
        | tar -xjf - -C "{{ .MBEDTLS_SRC_DIR }}" --strip-components=1'

  dev-update-openssl-headers:
    requires: { OPENSSL_SRC_DIR }
    vars:
      OPENSSL_GIT_URL: 'https://github.com/openssl/openssl'
      OPENSSL_GIT_BRANCH: 'openssl-3.4.0'
      TMP_DIR: '.update/openssl'
    cmds:
     - cmd: '{{ ._MKDIR }} "{{ .TMP_DIR }}"'
       ignore_error: true
     
     - cmd: git clone --depth 1 --branch {{ .OPENSSL_GIT_BRANCH }} {{ .OPENSSL_GIT_URL }} '{{ .TMP_DIR }}' 
     
     - for: [ 'include/openssl/*' ]
       cmd: powershell cp -Recurse -Force '{{ .TMP_DIR }}/{{ .ITEM }}' '{{ .OPENSSL_SRC_DIR }}'

  dev-update-secp256:
    requires: { SECP256_SRC_DIR }
    vars:
      TAG: 'v0.6.0'
      TAR_URL: 'https://github.com/bitcoin-core/secp256k1/archive/refs/tags/{{ .TAG }}.tar.gz'
    cmds:
     - cmd: curl {{ .TAR_URL }} -L | tar -xzf - -C '{{ .SECP256_SRC_DIR }}' --strip-components=1