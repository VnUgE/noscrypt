# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile performs the build operations for a module, it handles
#git code updates, msbuild on solutions, and sleet NuGet feed pushes.

#this file must be in the same directory as the solution file

#NOTES: Since CI project is pulled from the module root, MODULE_DIR is used instead of PROJECT_DIR

version: '3'

vars:
  CMAKE_BUILD_DIR: 'build/{{ OS }}'

tasks:

  default:
    desc: "Build the library for your system"
    cmds:
     - task: build-internal
       vars: { CMAKE_TEST_STATUS: 'OFF', BUILD_CONFIG: 'Release' }

  build-debug:
    desc: "Build libraries and test executable in debug mode"
    cmds:
     - task: build-internal
       vars: { CMAKE_TEST_STATUS: 'ON', BUILD_CONFIG: 'Debug' }

  build-internal:
    internal: true
    cmds:
     - cmake -S . -B{{.CMAKE_BUILD_DIR}} -DCMAKE_BUILD_TYPE={{.BUILD_CONFIG}} -DNC_BUILD_TESTS={{ .CMAKE_TEST_STATUS }} {{.CLI_ARGS}}
     - cmake --build {{.CMAKE_BUILD_DIR}} --config {{.BUILD_CONFIG}}
     - cmd: echo "Build complete. Your files can be found in the {{.CMAKE_BUILD_DIR}} directory"
       silent: true

  #available to users and vnbuild runner
  test:
    desc: "Builds a local copy of the library in a debug configuration, then runs the test executable"
    cmds:
     - task: build-debug
     - cmd: cd {{.CMAKE_BUILD_DIR}} && {{if eq OS "windows"}}debug/nctest.exe{{else}}./nctest{{end}}
  
  install:
    desc: "Uses cmake to install the library on your system"
    cmds:
     - cmd: cmake --install {{.CMAKE_BUILD_DIR}} {{.CLI_ARGS}}


#CI ONLY!!

  #called by build pipeline to build module
  build:
    cmds:
     - echo "building project {{.PROJECT_NAME}}" 
     - cmd: powershell -Command "mkdir bin/ -Force"
       ignore_error: true
  
     #build windows x64
     - task: build_win_x64

     #pack source
     - task: pack_source

  clean:
    desc: "Cleans the artifact directory"
    ignore_error: true
    cmds:
    - for: [ bin/, build/ ]
      task: clean-internal
      vars: { FILE: '{{.ITEM}}'}


  clean-internal:
    internal: true
    ignore_error: true
    cmds:
     - cmd: rm -rf '{{.FILE}}'
       platforms: [linux, darwin]
       
     - cmd: powershell rm -Recurse -Force '{{.FILE}}'
       platforms: [windows]

  build_win_x64:
    internal: true
    vars:
      TARGET_DLL: '{{.PROJECT_DIR}}/{{.BINARY_DIR}}/msvc-x64-release-{{.PROJECT_NAME}}.tgz'
      DLL_FILES: '{{.PROJECT_NAME}}.dll {{.PROJECT_NAME}}.lib license.txt'
      TARGET_STATIC: '{{.PROJECT_DIR}}/{{.BINARY_DIR}}/msvc-x64-release-{{.PROJECT_NAME}}-static.tgz'
      STATIC_FILES: '{{.PROJECT_NAME}}_static.lib license.txt'
      BUILD_DIR: 'build/win-x64'
    
    cmds:
    #invoke cmake build 
     - cmake -S . -B {{.BUILD_DIR}} -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DNC_BUILD_TESTS=OFF
     - cmake --build {{.BUILD_DIR}} --config Release  
    
    #copy license to build dir
     - powershell -Command "cp license {{.BUILD_DIR}}/Release/license.txt"

    #tar up the binaries
     - cd {{.BUILD_DIR}}/Release &&  tar -czf "{{.TARGET_DLL}}" {{.DLL_FILES}}

    #tar up static libs
     - cd {{.BUILD_DIR}}/Release &&  tar -czf "{{.TARGET_STATIC}}" {{.STATIC_FILES}}


  pack_source:
    internal: true
    desc: "Packs up the project source code and creates a tarball in the builds binary directory"
    vars:
      TARGET_SOURCE: '{{.PROJECT_DIR}}/{{.BINARY_DIR}}/{{.PROJECT_NAME}}-src.tgz'
      SOURCE_FILES: 'CMakeLists.txt src include license tests vendor readme.md Taskfile.yaml'

    cmds:
      #tar up the source
     - tar -czf "{{.TARGET_SOURCE}}" {{.SOURCE_FILES}}  
 
  
  dev-update-deps:
     desc: "Updates vendored projects files (headers mostly) from their source repositories to the latest version"
     cmds:
      - task: dev-update-monocypher
      - task: dev-update-mbedtls-headers
      - task: dev-update-openssl-headers

  dev-update-monocypher:
    vars:
      MC_GIT_URL: 'https://github.com/LoupVaillant/Monocypher'
      MC_GIT_BRANCH: 'master'       #NOTE: Always update to the latest master branch, then verify changes manually
      MC_DIR: 'vendor/monocypher'
      TMP_DIR: '.task/mc'
    cmds:
     - cmd: powershell mkdir '{{.TMP_DIR}}' -Force
       ignore_error: true
     
     - defer: powershell rm -Recurse '{{.TMP_DIR}}' -Force
     
     - git clone --branch {{.MC_GIT_BRANCH}} {{.MC_GIT_URL}} '{{.TMP_DIR}}' 

     - for: [ 'src/monocypher.h', 'src/monocypher.c' ]
       cmd: powershell cp '{{.TMP_DIR}}/{{.ITEM}}' '{{.MC_DIR}}'

  dev-update-mbedtls-headers:
    vars:
      MBEDTLS_GIT_URL: 'https://github.com/Mbed-TLS/mbedtls'
      MBEDTLS_GIT_BRANCH: 'development'
      MBEDTLS_DIR: 'vendor/mbedtls'
      TMP_DIR: '.task/mbedtls'
    cmds:
     - cmd: powershell mkdir '{{.TMP_DIR}}' -Force
       ignore_error: true

     - defer: powershell rm -Recurse '{{.TMP_DIR}}' -Force

     - git clone --branch {{ .MBEDTLS_GIT_BRANCH }} {{ .MBEDTLS_GIT_URL }} '{{ .TMP_DIR }}' 

     - for: [ 'include/mbedtls', 'include/psa' ]
       cmd: powershell cp -Recurse -Force '{{ .TMP_DIR }}/{{ .ITEM }}' '{{.MBEDTLS_DIR}}/include'

  dev-update-openssl-headers:
    vars:
      OPENSSL_GIT_URL: 'git://git.openssl.org/openssl.git'
      OPENSSL_GIT_BRANCH: 'master'
      OPENSSL_DIR: 'vendor/openssl'
      TMP_DIR: '.task/openssl'
    cmds:
     - cmd: powershell mkdir '{{.TMP_DIR}}' -Force
       ignore_error: true
     
     - defer: powershell rm -Recurse '{{.TMP_DIR}}' -Force
     
     - git clone --branch {{ .OPENSSL_GIT_BRANCH }} {{ .OPENSSL_GIT_URL }} '{{ .TMP_DIR }}' 
     
     - for: [ 'include/openssl' ]
       cmd: powershell cp -Recurse -Force '{{ .TMP_DIR }}/{{ .ITEM }}' '{{.OPENSSL_DIR}}/include/openssl/'