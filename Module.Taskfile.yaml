# https://taskfile.dev

#Called by the vnbuild system to produce builds for my website
#https://www.vaughnnugent.com/resources/software

#This taskfile performs the build operations for a module, it handles
#git code updates, msbuild on solutions, and sleet NuGet feed pushes.

#this file must be in the same directory as the solution file

version: '3'

includes:
  lib: 
    internal: true
    taskfile: ./Taskfile.yaml

  dotnet:
    internal: true
    dir: wrappers/dotnet/VNLib.Utils.Cryptography.Noscrypt
    taskfile: wrappers/dotnet/VNLib.Utils.Cryptography.Noscrypt/Taskfile.yaml

tasks:

  default:
    cmds:
     - cmd: | 
         echo "This is the Module taskfile, there is no default task configured"
         echo "Run 'task -t {{ base .TASKFILE }} --list' to see all available tasks"
         echo ""
       silent: true

#called by build pipeline to sync repo
  update:
    cmds:
     - cmd: git reset --hard  
     - cmd: git remote update
     - cmd: git pull origin {{ .BRANCH_NAME }} --verify-signatures 

  test:
    desc: 'Builds and runs noscrypt unit tests for vnbuild CI systems'   
    cmds:
     #run CI tests with utils enabled
     - task: lib:ci-test

     #ci tests clean up after themselves so we need to build the debug version again  
     - task: lib:default
       vars:
         BUILD_CONFIG: debug
         CMAKE_CONFIG_ARGS: '-DNC_ENABLE_UTILS=ON'

     # ensure the nuget source is configured 
     - task: dotnet:ensure-nuget-source

     - task: test-dotnet
     - task: lib:clean
    
     #repeat with mbedtls enabled
     - task: lib:build-mbedtls 
       vars:
         BUILD_CONFIG: debug
         CMAKE_CONFIG_ARGS: '-DNC_ENABLE_UTILS=ON'
     
     - task: test-dotnet
     - task: lib:clean
     
     - cmd: echo "all tests passed successfully"
       silent: true

  test-dotnet:
    desc: Runs dotnet unit tests for vnbuild CI systems
    vars:
      LIB_NAME: '{{ if eq OS "windows" }}noscrypt.dll{{ else }}libnoscrypt{{ end }}'
      LIB_PATH: '{{ .USER_WORKING_DIR }}/build/{{ OS }}/{{ if eq OS "windows" }}debug/{{ end }}{{ .LIB_NAME }}'
    cmds:

     - cmd: dotnet test 
        --nologo
        --logger "console;verbosity=detailed"
        --framework {{ .TARGET_FRAMEWORK | default "net8.0" }}   
        --configuration {{ .CONFIGURATION | default "Debug" }}     
        --environment VNLIB_SHARED_HEAP_DIAGNOSTICS="1"
        --environment 'NOSCRYPT_DLL_PATH="{{ osClean .LIB_PATH }}"'

#called by build pipeline to build module
  build:
    cmds:
     - cmd: echo "building module {{ .MODULE_NAME }}"

  publish:
    cmds:
     #git archive in the module directory
     - cmd: git archive --format {{ .ARCHIVE_FILE_FORMAT }} --output {{ .ARCHIVE_FILE_NAME }} HEAD

  #called by build pipeline to clean module
  clean:
    cmds:
     #clean solution
     - for: ['out/', 'build/']
       cmd: '{{ if eq OS "windows" }}powershell {{end}}rm -r {{ .ITEM }}'
       ignore_error: true


### RPM PACKAGES

  pack-rpm-install-deps:
    desc: "Installs RPM build dependencies using dnf"
    preconditions:
      - cmd: which dnf
    cmds:
      - cmd: dnf install -y cmake gcc make rpm-build openssl-devel libsecp256k1-devel

  pack-rpm-build:
    desc: "Build RPM packages for noscrypt"
    vars:
      RPM_BUILD_DIR: '{{ .USER_WORKING_DIR }}/build/rpm'
      PACKAGE_OUTPUT_DIR: '{{ .USER_WORKING_DIR }}/build/rpm/output'
    preconditions:
      - cmd: which cpack
      - cmd: which rpmbuild
    cmds:
      - cmd: echo "Building RPM package for noscrypt version {{ .BUILD_VERSION }}"
      - cmd: mkdir -p {{ .RPM_BUILD_DIR }}
        ignore_error: true

      # build the library with utils on, packaging on, and force openssl as the crypto lib
      - task: lib:default
        vars:
           CMAKE_BUILD_DIR: '{{ .RPM_BUILD_DIR }}'
           CMAKE_CONFIG_ARGS: '-DNC_ENABLE_UTILS=ON -DNC_ENABLE_PACKAGING=ON -DCRYPTO_LIB=openssl'

      - cmd: cd {{ .RPM_BUILD_DIR }} && cpack -G RPM -B '{{ .PACKAGE_OUTPUT_DIR }}'
      - cmd: echo "Packaging RPM completed successfully"
        silent: true