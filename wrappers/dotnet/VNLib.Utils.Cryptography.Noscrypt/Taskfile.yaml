#Builds c# libraries for produc

version: '3'

vars:  
  BINARY_DIR: '{{ .BINARY_DIR | default "bin" }}'
  ARCHIVE_FILE_NAME: '{{ .ARCHIVE_FILE_NAME | default "archive.tgz" }}'
  MS_ARGS: 
    /p:RunAnalyzersDuringBuild=false 
    /p:BuildInParallel=true 
    /p:MultiProcessorCompilation=true 
    /p:ErrorOnDuplicatePublishOutputFiles=false  

tasks:

  default:
    desc: 'Builds the managed libraries'
    dir: src/
    vars:
      CONFIGURATION: '{{ .CONFIGURATION | default "debug" }}'
    cmds:
     - cmd: dotnet build
        {{ .CLI_ARGS }}
        {{ .MS_ARGS }}
        --nologo
        --verbosity normal
        --configuration {{ .CONFIGURATION | default "Debug" }}
        --framework {{ .TARGET_FRAMEWORK | default "net8.0" }}

#called by build pipeline to build module
  build:
    desc: "Used by vnbuild to build the entire module at CI time"
    dir: '{{ .USER_WORKING_DIR }}'
    vars:
      PACK_OUT: '{{ .OUTPUT_DIR }}/{{ .HEAD_SHA }}/pkg'
      INT_DIR: '{{ .SCRATCH_DIR }}/obj/{{ .MODULE_NAME }}/'
      MS_ARGS: ' 
        {{ .MS_ARGS }} 
        --nologo
        /p:UseCommonOutputDirectory=true 
        /p:IntermediateOutputPath="{{ .INT_DIR }}"'
    deps:
     - ensure-nuget-source
    cmds:
     - cmd: echo "building project {{ .PROJECT_NAME }}" 
       silent: true

     #updates the project versions for all included .NET projects
     - cmd: dotnet-gitversion.exe /updateprojectfiles

     #build debug mode first
     - cmd: dotnet publish -c debug {{ .MS_ARGS }}
     - cmd: dotnet publish -c release {{ .MS_ARGS }}

     # ONLY Pack release config with debug symbols
     # pack can be run without build or restore because the previous commands build it
     - cmd: dotnet pack 
        --no-build 
        --no-restore
        --include-symbols
        --configuration release
        --output "{{ .PACK_OUT }}/release/"
        {{ .MS_ARGS }}

  postbuild_success:
    deps:
      - task: pack_source
      - task: pack_artifacts
        vars: { CONFIG: 'debug' }  
      - task: pack_artifacts
        vars: { CONFIG: 'release' }  

    cmds:
     - cmd: echo 'artifacts packaged'
       silent: true

  pack_artifacts:
    dir: '{{ .USER_WORKING_DIR }}'
    internal: true
    vars:
      SOURCE: 'bin/{{ .CONFIG }}/{{ .TARGET_FRAMEWORK }}/publish'
      TARGET: '{{ .USER_WORKING_DIR }}/{{ .BINARY_DIR }}/{{ .CONFIG }}.tgz'
    cmds:
      - cmd: cd {{ .SOURCE }} && tar -czf '{{ lower .TARGET }}' .

  pack_source:
    dir: '{{ .USER_WORKING_DIR }}'
    internal: true
    vars:
      TARGET: '{{ .USER_WORKING_DIR }}/bin'
      INCLUDES:
        src
        tests
        README.md
        Taskfile.yaml
      EXCLUDES: 
        --exclude='*obj/'
        --exclude='*bin/'
    cmds:
     #copy source code to target
     - cmd: cd .. && tar {{ .EXCLUDES }} -czf '{{ .TARGET }}/src.tgz' {{ .INCLUDES }}

#called by build pipeline to clean module
  clean:
    dir: '{{ .USER_WORKING_DIR }}'
    cmds:
    #clean solution
    - cmd: dotnet clean /p:BuildInParallel=true /p:MultiProcessorCompilation=true
    - for: [ obj/, bin/ ]
      cmd: '{{ if eq OS "windows" }}powershell rm -Recurse -Force{{ else }}rm -rf{{ end }} "{{ .ITEM }}"'

  ensure-nuget-source:
    desc: 'Ensures the VN NuGet source is configured'
    vars:
      NUGET_SOURCE_NAME: VNLib.Release
      NUGET_SOURCE_URL: https://www.vaughnnugent.com/public/resources/software/builds/feed/release/index.json
    cmds:
      # Check if source exists using a platform-agnostic approach
      - cmd: dotnet nuget add source '{{ .NUGET_SOURCE_URL }}' -n '{{ .NUGET_SOURCE_NAME }}'
        ignore_error: true